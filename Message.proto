message Message {
	required string MessageId = 1;
	required sfixed64 TimestampTicks = 2;
	required sfixed64 LastPatchTimestampTicks = 3;
	required string FromBoxId = 4;
	required string FromTitle = 5;
	optional string ToBoxId = 6;
	optional string ToTitle = 7;
	repeated Entity Entities = 8;
	optional bool IsDraft = 9 [default = false];
	optional bool DraftIsLocked = 10 [default = false];
	optional bool DraftIsRecycled = 11 [default = false];
	optional string CreatedFromDraftId = 12;
	optional string DraftIsTransformedToMessageId = 13;
	optional bool IsDeleted = 14 [default = false];
	optional bool IsTest = 15 [default = false];
	optional bool IsInternal = 16 [default = false];
}

message Entity {
	optional EntityType EntityType = 1 [default = UnknownEntityType];
	required string EntityId = 2;
	optional string ParentEntityId = 3;
	optional Content Content = 4;	// значение отсутствует тогда и только тогда, когда у сущности не предусмотрен контент
	optional AttachmentType AttachmentType = 5 [default = UnknownAttachmentType];
	optional string FileName = 6;
	optional bool NeedRecipientSignature = 7 [default = false];
	optional string SignerBoxId = 8;
	optional string NotDeliveredEventId = 10;
	optional Documents.Document DocumentInfo = 11;
	optional sfixed64 RawCreationDate = 12 [default = 0];
	optional ResolutionInfo ResolutionInfo = 13; // заполняется только для вложений с типом AttachmentType.Resolution
	optional string SignerDepartmentId = 14;     // заполняется только для вложений с типом EntityType.Signature
	optional ResolutionRequestInfo ResolutionRequestInfo = 15;	// заполняется только для вложений с типом AttachmentType.ResolutionRequest
	optional ResolutionRequestDenialInfo ResolutionRequestDenialInfo = 16;	// заполняется только для вложений с типом AttachmentType.ResolutionRequestDenial
}

enum EntityType {
	UnknownEntityType = 0;	// Reserved type to report to legacy clients for newly introduced entity types
	Attachment = 1;
	Signature = 2;
}

enum AttachmentType {
	UnknownAttachmentType = -1; // Reserved attachment type to report to legacy clients for newly introduced attachment types
	Nonformalized = 0;
	Invoice = 1;
	InvoiceReceipt = 2;
	InvoiceConfirmation = 3;
	InvoiceCorrectionRequest = 4;
	AttachmentComment = 5;
	DeliveryFailureNotification = 6;
	SignatureRequestRejection = 8;
	SignatureVerificationReport = 10;
	TrustConnectionRequest = 11;
	Torg12 = 12;
	InvoiceRevision = 13;
	InvoiceCorrection = 14;
	InvoiceCorrectionRevision = 15;
	AcceptanceCertificate = 16;
	StructuredData = 17;
	ProformaInvoice = 18;
	XmlTorg12 = 19;
	XmlAcceptanceCertificate = 20;
	XmlTorg12BuyerTitle = 21;
	XmlAcceptanceCertificateBuyerTitle = 22;
	Resolution = 23;
	ResolutionRequest = 24;
	ResolutionRequestDenial = 25;
	PriceList = 26;
	Receipt = 27;
	XmlSignatureRejection = 28;
	RevocationRequest = 29;
	PriceListAgreement = 30;
	CertificateRegistry = 34;
	ReconciliationAct = 35;
	Contract = 36;
	Torg13 = 37;
	ServiceDetails = 38;
	//Неизвестные типы должны обрабатываться как Nonformalized
}

message Content {
	required sfixed32 Size = 1;	
	optional bytes Data = 2;	
}

message Signer {
	optional bytes SignerCertificate = 1;
	optional SignerDetails SignerDetails = 2;
}

message SignerDetails {
	required string Surname = 1;
	required string FirstName = 2;
	optional string Patronymic = 3;
	optional string JobTitle = 4;
	optional string Inn = 5;
	optional string SoleProprietorRegistrationCertificate = 6;
}

message ResolutionInfo {
	optional ResolutionType ResolutionType = 1 [default = UnknownResolutionType];
	required string Author = 2; // ФИО согласователя
	optional string InitialRequestId = 3;
}

enum ResolutionType {
	Undefined = 0;
	Approve = 1;
	Disapprove = 2;
	UnknownResolutionType = 3;
}

message ResolutionAttachment {
	required string DocumentId = 1;
	required ResolutionType ResolutionType = 2;
	optional string Comment = 3;
}

message ResolutionRequestDenialInfo {
	required string Author = 1;
	optional string InitialRequestId = 2;
}

message ResolutionRequestDenialAttachment {
	required string InitialResolutionRequestId = 1;
	optional string Comment = 2;
}

message ResolutionRequestDenialCancellationAttachment {
	required string InitialResolutionRequestDenialId = 1;
}

message ResolutionRequestInfo {
	required ResolutionRequestType RequestType = 1;
	required string Author = 2;
	optional string TargetDepartment = 3;
	optional string TargetDepartmentId = 4;
	optional string TargetUser = 5;
	optional string TargetUserId = 6;
	optional string ResolvedWith = 7;
}

enum ResolutionRequestType {
	ApprovementRequest = 0;
	SignatureRequest = 1;
}

message ResolutionRequestAttachment {
	required string InitialDocumentId = 1;
	required ResolutionRequestType Type = 2;
	optional string TargetUserId = 3;
	optional string TargetDepartmentId = 4;
	optional string Comment = 5;
}

message ResolutionRequestCancellationAttachment {
	required string InitialResolutionRequestId = 1;
}

message Document {
	optional string IndexKey = 1;
	required string MessageId = 2;
	required string EntityId = 3;
	required sfixed64 CreationTimestampTicks = 4;
	optional string CounteragentBoxId = 5;
	optional DocumentType DocumentType = 6 [default = UnknownDocumentType];
	repeated DocumentId InitialDocumentIds = 7;
	repeated DocumentId SubordinateDocumentIds = 8;
	optional Content Content = 9;
	optional string FileName = 10;
	optional string DocumentDate = 11;
	optional string DocumentNumber = 12;
	optional NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
	optional InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
	optional BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
	optional BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
	optional InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
	optional InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
	optional InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
	optional AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
	optional UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
	optional BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
	optional BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
	optional bool IsDeleted = 24 [default = false];
	optional string DepartmentId = 25;
	optional bool IsTest = 26 [default = false];
	optional string FromDepartmentId = 27;
	optional string ToDepartmentId = 28;
	optional BilateralDocument.PriceListMetadata PriceListMetadata = 29;
	optional string CustomDocumentId = 30;
	optional ResolutionStatus ResolutionStatus = 31;
	optional RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
	optional sfixed64 SendTimestampTicks = 33;
	optional sfixed64 DeliveryTimestampTicks = 34;
	repeated ForwardDocumentEvent ForwardDocumentEvents = 35;
	optional BilateralDocument.BilateralDocumentMetadata PriceListAgreementMetadata = 36;
	optional BilateralDocument.BilateralDocumentMetadata CertificateRegistryMetadata = 37;
	optional BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
	optional BilateralDocument.ContractMetadata ContractMetadata = 39;
	optional BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
	optional UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
}

enum RevocationStatus {
	UnknownRevocationStatus = 0; // Reserved status to report to legacy clients for newly introduced statuses
	RevocationStatusNone = 1;
	RevocationIsRequestedByMe = 2;
	RequestsMyRevocation = 3;
	RevocationAccepted = 4;
	RevocationRejected = 5;
}

message NonformalizedDocumentMetadata {
	optional NonformalizedDocumentStatus DocumentStatus = 1 [default = UnknownNonformalizedDocumentStatus];
}

enum NonformalizedDocumentStatus {
	UnknownNonformalizedDocumentStatus = 0;
	OutboundNoRecipientSignatureRequest = 1;
	OutboundWaitingForRecipientSignature = 2;
	OutboundWithRecipientSignature = 3;
	OutboundRecipientSignatureRequestRejected = 4;
	OutboundWaitingForSenderSignature = 13;
	OutboundInvalidSenderSignature = 14;
	InboundNoRecipientSignatureRequest = 5;
	InboundWaitingForRecipientSignature = 6;
	InboundWithRecipientSignature = 7;
	InboundRecipientSignatureRequestRejected = 8;
	InboundInvalidRecipientSignature = 15;
	InternalNoRecipientSignatureRequest = 9;
	InternalWaitingForRecipientSignature = 10;
	InternalWithRecipientSignature = 11;
	InternalRecipientSignatureRequestRejected = 12;
	InternalWaitingForSenderSignature = 16;
	InternalInvalidSenderSignature = 17;
	InternalInvalidRecipientSignature = 18;
}


